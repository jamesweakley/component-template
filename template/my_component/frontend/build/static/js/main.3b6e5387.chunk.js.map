{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyComponent","state","myQueryResults","isFocused","render","props","args","queryResults","theme","style","borderStyling","primaryColor","border","outline","console","log","parent","postMessage","JSON","stringify","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","doQuery","query","a","iframe","document","createElement","searchUrl","window","location","search","streamlitUrl","decodeURIComponent","replace","src","display","iframeElement","body","appendChild","Promise","resolve","contentWindow","addEventListener","e","data","message","undefined","isStreamlitMessage","removeChild","setState","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"wRAgBMA,E,4MACGC,MAAQ,CAAEC,eAAgB,GAAIC,WAAW,G,EAEzCC,OAAS,WAID,EAAKC,MAAMC,KAAX,KAAb,IACMC,EAAe,EAAKF,MAAMC,KAAX,cAKbE,EAAU,EAAKH,MAAfG,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKT,MAAME,UAAYK,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAgBlB,OAbIH,IACFO,QAAQC,IAAI,yBACZC,OAAOC,YAAYV,IAYnB,+CACiBW,KAAKC,UAAU,EAAKlB,MAAMC,gBAAgB,6BACzD,4BACEO,MAAOA,EACPW,QAAS,EAAKC,UACdC,SAAU,EAAKjB,MAAMiB,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,SALf,gB,EAaEC,Q,uCAAQ,WAAOC,GAAP,qBAAAC,EAAA,6DACVC,EAAaC,SAASC,cAAc,UAClCC,EAAUC,OAAOC,SAASC,OAC1BC,EAAaC,mBAAmBL,EAAUM,QAAQ,iBAAiB,KACzEzB,QAAQC,IAAI,wBAAwBsB,EAAa,UAAUT,GAC3DE,EAAOU,IAAMH,EAAa,UAAUT,EACpCE,EAAOrB,MAAMgC,QAAU,OACnBC,EAAgBX,SAASY,KAAKC,YAAYd,GAPhC,kBAQP,IAAIe,SAAQ,SAASC,GAC1BhB,EAAOiB,cAAcC,iBAAiB,WAAW,SAACC,GAChD,IACMC,EAAOD,EADDA,EAAEE,QAAU,UAAY,QAEpCrC,QAAQC,IAAI,OAAOmC,QACWE,IAA1BF,EAAKG,qBACPtB,SAASY,KAAKW,YAAYZ,GAC1BI,EAAQI,OAEV,OAjBU,2C,wDAwBR7B,U,sBAAY,4BAAAQ,EAAA,6DAGlBf,QAAQC,IAAI,iBAHM,SAIO,EAAKY,QAAQ,YAJpB,OAIdpB,EAJc,OAKlB,EAAKgD,SAAS,CAAErD,eAAgBK,IALd,2C,EAaZiB,SAAW,WACjB,EAAK+B,SAAS,CAAEpD,WAAW,K,EAIrBuB,QAAU,WAChB,EAAK6B,SAAS,CAAEpD,WAAW,K,yBApGLqD,KA6GXC,cAAwBzD,GCzHvC0D,IAAStD,OACP,kBAAC,IAAMuD,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,W","file":"static/js/main.3b6e5387.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useEffect } from \"react\"\n\ninterface State {\n  myQueryResults: any\n  isFocused: boolean\n}\ndeclare var parent: any;\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { myQueryResults: {}, isFocused: false }\n\n  public render = (): ReactNode => {\n    \n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const queryResults = this.props.args[\"query_results\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    if (queryResults){\n      console.log('posting query results')\n      parent.postMessage(queryResults)\n    }else{\n      //\n      //doQuery('select 1');\n    }\n    \n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        queryResults: {JSON.stringify(this.state.myQueryResults)}<hr/>\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Run query!\n        </button>\n      </span>\n    )\n  }\n\n  private doQuery=async (query:string):Promise<any> => {\n    var iframe:any = document.createElement('iframe');\n    const searchUrl=window.location.search;\n    const streamlitUrl=decodeURIComponent(searchUrl.replace('?streamlitUrl=',''));\n    console.log('opening component at ',streamlitUrl+'?query='+query)\n    iframe.src = streamlitUrl+'?query='+query;\n    iframe.style.display = 'none';\n    var iframeElement = document.body.appendChild(iframe);\n    return new Promise(function(resolve){\n      iframe.contentWindow.addEventListener('message', (e:any) => {\n        const key = e.message ? 'message' : 'data';\n        const data = e[key];\n        console.log('data',data);\n        if (data.isStreamlitMessage===undefined){\n          document.body.removeChild(iframeElement);\n          resolve(data);\n        }\n      },false);\n  });\n\n    //iframe.contentWindow.body.addEventListener('click',() => console.log('click)))\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = async (): Promise<void> => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    console.log('running query');\n    var queryResults = await this.doQuery('select 1');\n    this.setState({ myQueryResults: queryResults })\n    /*this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )*/\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}