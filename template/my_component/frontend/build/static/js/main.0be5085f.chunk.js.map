{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["withStreamlitConnection","props","useEffect","Streamlit","setFrameHeight","useState","isFocused","setFocused","isLoading","setLoading","args","queryResults","setQueryResults","theme","style","borderStyling","primaryColor","border","outline","console","log","parent","postMessage","doQuery","query","a","iframe","document","createElement","searchUrl","window","location","search","streamlitUrl","decodeURIComponent","replace","src","display","iframeElement","body","appendChild","Promise","resolve","contentWindow","addEventListener","e","data","message","undefined","isStreamlitMessage","removeChild","onClicked","JSON","stringify","onClick","disabled","onFocus","onBlur","ReactDOM","render","StrictMode","getElementById"],"mappings":"iQAuIeA,eAhHK,SAACC,GACnBC,qBAAU,WACRC,IAAUC,oBAEZ,MAAgCC,oBAAkB,GAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAkB,GAAlD,mBAAOG,EAAP,KAAkBC,EAAlB,KAGA,EAAwCJ,mBAAcJ,EAAMS,KAAN,eAAtD,mBAAOC,EAAP,KAAqBC,EAArB,KAEQC,EAAUZ,EAAVY,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjBT,EAAYO,EAAMG,aAAe,QAEnCF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAGdJ,IACFQ,QAAQC,IAAI,yBACZC,OAAOC,YAAYX,IAGrB,IAAMY,EAAO,uCAAC,WAAOC,GAAP,qBAAAC,EAAA,6DACRC,EAAaC,SAASC,cAAc,UAClCC,EAAUC,OAAOC,SAASC,OAC1BC,EAAaC,mBAAmBL,EAAUM,QAAQ,iBAAiB,KACzEhB,QAAQC,IAAI,wBAAwBa,EAAa,UAAUT,GAC3DE,EAAOU,IAAMH,EAAa,UAAUT,EACpCE,EAAOZ,MAAMuB,QAAU,OACnBC,EAAgBX,SAASY,KAAKC,YAAYd,GAPlC,kBAQL,IAAIe,SAAQ,SAASC,GAC1BhB,EAAOiB,cAAcC,iBAAiB,WAAW,SAACC,GAChD,IACMC,EAAOD,EADDA,EAAEE,QAAU,UAAY,QAEpC5B,QAAQC,IAAI,OAAO0B,QACWE,IAA1BF,EAAKG,qBACPtB,SAASY,KAAKW,YAAYZ,GAC1BI,EAAQI,OAEV,OAjBQ,2CAAD,sDAsBPK,EAAS,uCAAG,4BAAA1B,EAAA,6DAGhBN,QAAQC,IAAI,iBACZX,GAAW,GAJK,SAKSc,EAAQ,YALjB,OAKZZ,EALY,OAMhBC,EAAgBD,GAChBF,GAAW,GAPK,2CAAH,qDA6Bf,OACE,8BACGD,GACC,4CAIAA,GACA,8CACiB4C,KAAKC,UAAU1C,GAAc,8BAGhD,4BACEG,MAAOA,EACPwC,QAASH,EACTI,SAAUtD,EAAMsD,SAChBC,QA9BW,WACfjD,GAAW,IA8BPkD,OA1BU,WACdlD,GAAW,KAoBT,kBChHNmD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,W","file":"static/js/main.0be5085f.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  Theme,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useEffect, useState } from \"react\"\n\ninterface StreamlitPropsState {\n  args: any;\n  /** The component's width. */\n  width: number;\n  /**\n   * True if the component should be disabled.\n   * All components get disabled while the app is being re-run,\n   * and become re-enabled when the re-run has finished.\n   */\n  disabled: boolean;\n  /** Theme definition dictionary passed from the main client.*/\n  theme?: Theme;\n}\ndeclare var parent: any;\n\nconst MyComponent = (props:StreamlitPropsState) => {\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  });\n  const [isFocused, setFocused] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  // Arguments that are passed to the plugin in Python are accessible\n  // via `this.props.args`\n  const [queryResults, setQueryResults] = useState<any>(props.args[\"query_results\"]);\n\n  const { theme } = props\n  const style: React.CSSProperties = {}\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (theme) {\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${\n      isFocused ? theme.primaryColor : \"gray\"\n    }`\n    style.border = borderStyling\n    style.outline = borderStyling\n  }\n\n  if (queryResults){\n    console.log('posting query results')\n    parent.postMessage(queryResults)\n  }\n\n  const doQuery=async (query:string):Promise<any> => {\n    var iframe:any = document.createElement('iframe');\n    const searchUrl=window.location.search;\n    const streamlitUrl=decodeURIComponent(searchUrl.replace('?streamlitUrl=',''));\n    console.log('opening component at ',streamlitUrl+'?query='+query)\n    iframe.src = streamlitUrl+'?query='+query;\n    iframe.style.display = 'none';\n    var iframeElement = document.body.appendChild(iframe);\n    return new Promise(function(resolve){\n      iframe.contentWindow.addEventListener('message', (e:any) => {\n        const key = e.message ? 'message' : 'data';\n        const data = e[key];\n        console.log('data',data);\n        if (data.isStreamlitMessage===undefined){\n          document.body.removeChild(iframeElement);\n          resolve(data);\n        }\n      },false);\n    });\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  const onClicked = async (): Promise<void> => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    console.log('running query');\n    setLoading(true);\n    var queryResults = await doQuery('select 1');\n    setQueryResults(queryResults);\n    setLoading(false);\n    /*this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )*/\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const _onFocus = (): void => {\n    setFocused(true);\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const _onBlur = (): void => {\n    setFocused(false);\n  }\n  \n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return (\n    <span>\n      {isLoading &&\n        <div>\n          Loading...\n        </div>\n      }\n      {!isLoading &&\n        <div>\n          queryResults: {JSON.stringify(queryResults)}<hr/>\n        </div>\n      }\n      <button\n        style={style}\n        onClick={onClicked}\n        disabled={props.disabled}\n        onFocus={_onFocus}\n        onBlur={_onBlur}\n      >\n        Run query!\n      </button>\n    </span>\n  )\n}\n\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}