{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyComponent","state","numClicks","isFocused","render","name","props","args","queryResults","theme","style","borderStyling","primaryColor","border","outline","console","log","parent","postMessage","query","iframe","document","createElement","window","location","origin","src","body","appendChild","contentWindow","addEventListener","e","data","message","doQuery","JSON","stringify","href","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","setState","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"iQAgBMA,E,4MACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,G,EAInCC,OAAS,WAId,IAAMC,EAAO,EAAKC,MAAMC,KAAX,KACPC,EAAe,EAAKF,MAAMC,KAAX,cAKbE,EAAU,EAAKH,MAAfG,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKV,MAAME,UAAYM,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAiClB,OAdIH,GACFO,QAAQC,IAAI,yBACZC,OAAOC,YAAY,QAAQV,KAE3BO,QAAQC,IAAI,iBAnBA,SAACG,GACb,IAAIC,EAAaC,SAASC,cAAc,UACxCP,QAAQC,IAAI,wBAAwBO,OAAOC,SAASC,OAAO,UAAUN,GACrEC,EAAOM,IAAMH,OAAOC,SAASC,OAAO,UAAUN,EAE9CE,SAASM,KAAKC,YAAYR,GAC1BA,EAAOS,cAAcC,iBAAiB,WAAW,SAACC,GAChD,IACMC,EAAOD,EADDA,EAAEE,QAAU,UAAY,QAEpClB,QAAQC,IAAI,OAAOgB,MACnB,GAUFE,CAAQ,aAUR,+CACiBC,KAAKC,UAAU5B,GAAc,6BAC3C2B,KAAKC,UAAUb,OAAOC,UAAU,6BAEjC,mCAJF,IAIeD,OAAOC,SAASa,KAAK,6BAClC,qCALF,IAKiBd,OAAOC,SAASC,OAC/B,6BANF,UAOUpB,EAPV,SAQE,4BACEK,MAAOA,EACP4B,QAAS,EAAKC,UACdC,SAAU,EAAKlC,MAAMkC,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,SALf,e,EAcEL,UAAY,WAGlB,EAAKM,UACH,SAAAC,GAAS,MAAK,CAAE5C,UAAW4C,EAAU5C,UAAY,MACjD,kBAAM6C,IAAUC,kBAAkB,EAAK/C,MAAMC,e,EAKzCwC,SAAW,WACjB,EAAKG,SAAS,CAAE1C,WAAW,K,EAIrByC,QAAU,WAChB,EAAKC,SAAS,CAAE1C,WAAW,K,yBAnGL8C,KA4GXC,cAAwBlD,GCxHvCmD,IAAS/C,OACP,kBAAC,IAAMgD,WAAP,KACE,kBAAC,EAAD,OAEF/B,SAASgC,eAAe,W","file":"static/js/main.04055581.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useEffect } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\ndeclare var parent: any;\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  \n\n  public render = (): ReactNode => {\n    \n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const queryResults = this.props.args[\"query_results\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n    \n    \n    const doQuery=(query:string) => {\n      var iframe:any = document.createElement('iframe');\n      console.log('opening component at ',window.location.origin+'?query='+query)\n      iframe.src = window.location.origin+'?query='+query;\n      //iframe.style.display = 'none';\n      document.body.appendChild(iframe);\n      iframe.contentWindow.addEventListener('message', (e:any) => {\n        const key = e.message ? 'message' : 'data';\n        const data = e[key];\n        console.log('data',data);\n      },false);\n\n      //iframe.contentWindow.body.addEventListener('click',() => console.log('click)))\n    }\n\n    if (queryResults){\n      console.log('posting query results')\n      parent.postMessage(\"Hello\",queryResults)\n    }else{\n      console.log('running query')\n      doQuery('select 1');\n    }\n    \n  \n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        queryResults: {JSON.stringify(queryResults)}<hr/>\n        {JSON.stringify(window.location)}<hr/>\n        \n        <b>href</b>:{window.location.href}<hr/>\n        <b>origin</b>:{window.location.origin}\n        <hr/>\n        Hello, {name}! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Click Me!\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}